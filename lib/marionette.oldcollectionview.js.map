{"version":3,"file":"marionette.oldcollectionview.js","sources":["src/error.js","src/common/trigger-method.js","src/common/view.js","src/common/monitor-view-events.js","src/utils/emulate-collection.js","src/child-view-container.js","src/collection-view.js","src/composite-view.js","src/old.js"],"sourcesContent":["// Error\n// -----\n\nimport _ from 'underscore';\nimport { View } from 'backbone.marionette';\n\nconst extend = View.extend;\n\nconst errorProps = ['description', 'fileName', 'lineNumber', 'name', 'message', 'number'];\n\nconst MarionetteError = extend.call(Error, {\n  urlRoot: 'https://github.com/marionettejs/marionette.oldcollectionview/tree/master/',\n\n  constructor(message, options) {\n    if (_.isObject(message)) {\n      options = message;\n      message = options.message;\n    } else if (!options) {\n      options = {};\n    }\n\n    const error = Error.call(this, message);\n    _.extend(this, _.pick(error, errorProps), _.pick(options, errorProps));\n\n    this.captureStackTrace();\n\n    if (options.url) {\n      this.url = this.urlRoot + options.url;\n    }\n  },\n\n  captureStackTrace() {\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, MarionetteError);\n    }\n  },\n\n  toString() {\n    return this.name + ': ' + this.message + (this.url ? ' See: ' + this.url : '');\n  }\n});\n\nMarionetteError.extend = extend;\n\nexport default MarionetteError;\n","// Trigger Method\n// --------------\n\nimport _ from 'underscore';\nimport Marionette, { getOption } from 'backbone.marionette';\n\n// split the event name on the \":\"\nconst splitter = /(^|:)(\\w)/gi;\n\n// take the event section (\"section1:section2:section3\")\n// and turn it in to uppercase name onSection1Section2Section3\nfunction getEventName(match, prefix, eventName) {\n  return eventName.toUpperCase();\n}\n\nconst getOnMethodName = _.memoize(function(event) {\n  return 'on' + event.replace(splitter, getEventName);\n});\n\n// Trigger an event and/or a corresponding method name. Examples:\n//\n// `this.triggerMethod(\"foo\")` will trigger the \"foo\" event and\n// call the \"onFoo\" method.\n//\n// `this.triggerMethod(\"foo:bar\")` will trigger the \"foo:bar\" event and\n// call the \"onFooBar\" method.\nexport function triggerMethod(event, ...args) {\n  // get the method name from the event name\n  const methodName = getOnMethodName(event);\n  const method = getOption(this, methodName);\n  let result;\n\n  // call the onMethodName if it exists\n  if (_.isFunction(method)) {\n    // pass all args, except the event name\n    result = method.apply(this, args);\n  }\n\n  // trigger the event\n  this.trigger.apply(this, arguments);\n\n  return result;\n}\n\n// triggerMethodOn invokes triggerMethod on a specific context\n//\n// e.g. `Marionette.triggerMethodOn(view, 'show')`\n// will trigger a \"show\" event or invoke onShow the view.\nfunction triggerMethodOn(context, ...args) {\n  if (_.isFunction(context.triggerMethod)) {\n    return context.triggerMethod.apply(context, args);\n  }\n\n  return triggerMethod.apply(context, args);\n}\n\n// For tests\nMarionette.triggerMethodOn = triggerMethodOn;\n\nexport {\n  triggerMethodOn\n}\n","import { triggerMethodOn } from '../common/trigger-method';\n\nexport function renderView(view) {\n  if (view._isRendered) {\n    return;\n  }\n\n  if (!view.supportsRenderLifecycle) {\n    triggerMethodOn(view, 'before:render', view);\n  }\n\n  view.render();\n\n  if (!view.supportsRenderLifecycle) {\n    view._isRendered = true;\n    triggerMethodOn(view, 'render', view);\n  }\n}\n\nexport function destroyView(view) {\n  if (view.destroy) {\n    view.destroy();\n    return;\n  }\n\n  if (!view.supportsDestroyLifecycle) {\n    triggerMethodOn(view, 'before:destroy', view);\n  }\n\n  const shouldTriggerDetach = view._isAttached && !view._shouldDisableEvents;\n\n  if (shouldTriggerDetach) {\n    triggerMethodOn(view, 'before:detach', view);\n  }\n\n  view.remove();\n\n  if (shouldTriggerDetach) {\n    view._isAttached = false;\n    triggerMethodOn(view, 'detach', view);\n  }\n\n  view._isDestroyed = true;\n\n  if (!view.supportsDestroyLifecycle) {\n    triggerMethodOn(view, 'destroy', view);\n  }\n}\n","// DOM Refresh\n// -----------\n\nimport _ from 'underscore';\nimport { triggerMethodOn } from './trigger-method';\n\n// Trigger method on children unless a pure Backbone.View\nfunction triggerMethodChildren(view, event, shouldTrigger) {\n  if (!view._getImmediateChildren) { return; }\n  _.each(view._getImmediateChildren(), child => {\n    if (!shouldTrigger(child)) { return; }\n    triggerMethodOn(child, event, child);\n  });\n}\n\nfunction shouldTriggerAttach(view) {\n  return !view._isAttached;\n}\n\nfunction shouldAttach(view) {\n  if (!shouldTriggerAttach(view)) { return false; }\n  view._isAttached = true;\n  return true;\n}\n\nfunction shouldTriggerDetach(view) {\n  return view._isAttached;\n}\n\nfunction shouldDetach(view) {\n  if (!shouldTriggerDetach(view)) { return false; }\n  view._isAttached = false;\n  return true;\n}\n\nfunction triggerDOMRefresh(view) {\n  if (view._isAttached && view._isRendered) {\n    triggerMethodOn(view, 'dom:refresh', view);\n  }\n}\n\nfunction triggerDOMRemove(view) {\n  if (view._isAttached && view._isRendered) {\n    triggerMethodOn(view, 'dom:remove', view);\n  }\n}\n\nfunction handleBeforeAttach() {\n  triggerMethodChildren(this, 'before:attach', shouldTriggerAttach);\n}\n\nfunction handleAttach() {\n  triggerMethodChildren(this, 'attach', shouldAttach);\n  triggerDOMRefresh(this);\n}\n\nfunction handleBeforeDetach() {\n  triggerMethodChildren(this, 'before:detach', shouldTriggerDetach);\n  triggerDOMRemove(this);\n}\n\nfunction handleDetach() {\n  triggerMethodChildren(this, 'detach', shouldDetach);\n}\n\nfunction handleBeforeRender() {\n  triggerDOMRemove(this);\n}\n\nfunction handleRender() {\n  triggerDOMRefresh(this);\n}\n\n// Monitor a view's state, propagating attach/detach events to children and firing dom:refresh\n// whenever a rendered view is attached or an attached view is rendered.\nfunction monitorViewEvents(view) {\n  if (view._areViewEventsMonitored || view.monitorViewEvents === false) { return; }\n\n  view._areViewEventsMonitored = true;\n\n  view.on({\n    'before:attach': handleBeforeAttach,\n    'attach': handleAttach,\n    'before:detach': handleBeforeDetach,\n    'detach': handleDetach,\n    'before:render': handleBeforeRender,\n    'render': handleRender\n  });\n}\n\nexport default monitorViewEvents;\n","// Mix in methods from Underscore, for iteration, and other\n// collection related features.\n// Borrowing this code from Backbone.Collection:\n// https://github.com/jashkenas/backbone/blob/1.1.2/backbone.js#L962\n\nimport _ from 'underscore';\n\nconst methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter',\n                'select', 'reject', 'every', 'all', 'some', 'any', 'include',\n                'contains', 'invoke', 'toArray', 'first', 'initial', 'rest',\n                'last', 'without', 'isEmpty', 'pluck', 'reduce', 'partition'];\n\nconst emulateCollection = function(object, listProperty) {\n  _.each(methods, function(method) {\n    object[method] = function() {\n      const list = _.result(this, listProperty);\n      const args = Array.prototype.slice.call(arguments);\n      return _[method].apply(_, [list].concat(args));\n    };\n  });\n};\n\nexport default emulateCollection;\n","import _ from 'underscore';\nimport emulateCollection from './utils/emulate-collection';\n\n// Provide a container to store, retrieve and\n// shut down child views.\nconst Container = function(views) {\n  this._views = {};\n  this._indexByModel = {};\n  this._indexByCustom = {};\n  this._updateLength();\n\n  _.each(views, _.bind(this.add, this));\n};\n\nemulateCollection(Container.prototype, '_getViews');\n\n// Container Methods\n// -----------------\n\n_.extend(Container.prototype, {\n\n  _getViews() {\n    return _.values(this._views);\n  },\n\n  // Add a view to this container. Stores the view\n  // by `cid` and makes it searchable by the model\n  // cid (and model itself). Optionally specify\n  // a custom key to store an retrieve the view.\n  add(view, customIndex) {\n    return this._add(view, customIndex)._updateLength();\n  },\n\n  // To be used when avoiding call _updateLength\n  // When you are done adding all your new views\n  // call _updateLength\n  _add(view, customIndex) {\n    const viewCid = view.cid;\n\n    // store the view\n    this._views[viewCid] = view;\n\n    // index it by model\n    if (view.model) {\n      this._indexByModel[view.model.cid] = viewCid;\n    }\n\n    // index by custom\n    if (customIndex) {\n      this._indexByCustom[customIndex] = viewCid;\n    }\n\n    return this;\n  },\n\n  // Find a view by the model that was attached to\n  // it. Uses the model's `cid` to find it.\n  findByModel(model) {\n    return this.findByModelCid(model.cid);\n  },\n\n  // Find a view by the `cid` of the model that was attached to\n  // it. Uses the model's `cid` to find the view `cid` and\n  // retrieve the view using it.\n  findByModelCid(modelCid) {\n    const viewCid = this._indexByModel[modelCid];\n    return this.findByCid(viewCid);\n  },\n\n  // Find a view by a custom indexer.\n  findByCustom(index) {\n    const viewCid = this._indexByCustom[index];\n    return this.findByCid(viewCid);\n  },\n\n  // Find by index. This is not guaranteed to be a\n  // stable index.\n  findByIndex(index) {\n    return _.values(this._views)[index];\n  },\n\n  // retrieve a view by its `cid` directly\n  findByCid(cid) {\n    return this._views[cid];\n  },\n\n  // Remove a view\n  remove(view) {\n    return this._remove(view)._updateLength();\n  },\n\n  // To be used when avoiding call _updateLength\n  // When you are done adding all your new views\n  // call _updateLength\n  _remove(view) {\n    const viewCid = view.cid;\n\n    // delete model index\n    if (view.model) {\n      delete this._indexByModel[view.model.cid];\n    }\n\n    // delete custom index\n    _.some(this._indexByCustom, _.bind(function(cid, key) {\n      if (cid === viewCid) {\n        delete this._indexByCustom[key];\n        return true;\n      }\n    }, this));\n\n    // remove the view from the container\n    delete this._views[viewCid];\n\n    return this;\n  },\n\n  // Update the `.length` attribute on this container\n  _updateLength() {\n    this.length = _.size(this._views);\n\n    return this;\n  }\n});\n\nexport default Container;\n","// Collection View\n// ---------------\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\nimport { View } from 'backbone.marionette';\nimport MarionetteError from './error';\n\nimport { renderView, destroyView } from './common/view';\nimport monitorViewEvents from './common/monitor-view-events';\nimport { triggerMethodOn } from './common/trigger-method';\nimport ChildViewContainer from './child-view-container';\n\nconst isNodeAttached = function(el) {\n  return document.documentElement.contains(el && el.parentNode);\n};\n\nconst setDomApi = View.setDomApi;\n\nconst ViewMixin = _.pick(View.prototype,\n  'Dom',\n  'supportsRenderLifecycle',\n  'supportsDestroyLifecycle',\n  '_isDestroyed',\n  'isDestroyed',\n  '_isRendered',\n  'isRendered',\n  '_isAttached',\n  'isAttached',\n  'delegateEvents',\n  '_getEvents',\n  '_getTriggers',\n  'delegateEntityEvents',\n  'undelegateEntityEvents',\n  'destroy',\n  '_removeElement',\n  'bindUIElements',\n  'unbindUIElements',\n  'getUI',\n  'triggerMethod',\n  '_buildEventProxies',\n  '_getEventPrefix',\n  '_proxyChildViewEvents',\n  '_childViewEventHandler',\n  // BehaviorsMixin\n  '_initBehaviors',\n  '_getBehaviors',\n  '_getBehaviorTriggers',\n  '_getBehaviorEvents',\n  '_proxyBehaviorViewProperties',\n  '_delegateBehaviorEntityEvents',\n  '_undelegateBehaviorEntityEvents',\n  '_deleteEntityEventHandlers',\n  '_destroyBehaviors',\n  '_removeBehavior',\n  '_bindBehaviorUIElements',\n  '_unbindBehaviorUIElements',\n  '_triggerEventOnBehaviors',\n  // CommonMixin\n  'normalizeMethods',\n  '_setOptions',\n  'mergeOptions',\n  'getOption',\n  'bindEvents',\n  'unbindEvents',\n  // DelegateEntityEventsMixin\n  '_delegateEntityEvents',\n  '_undelegateEntityEvents',\n  // TriggersMixin\n  '_getViewTriggers',\n  // UIMixin\n  'normalizeUIKeys',\n  'normalizeUIString',\n  'normalizeUIValues',\n  '_getUIBindings',\n  '_bindUIElements',\n  '_unbindUIElements',\n  '_getUI'\n);\n\nconst ClassOptions = [\n  'behaviors',\n  'childView',\n  'childViewEventPrefix',\n  'childViewEvents',\n  'childViewOptions',\n  'childViewTriggers',\n  'collectionEvents',\n  'events',\n  'filter',\n  'emptyView',\n  'emptyViewOptions',\n  'modelEvents',\n  'reorderOnSort',\n  'sort',\n  'triggers',\n  'ui',\n  'viewComparator'\n];\n\n// A view that iterates over a Backbone.Collection\n// and renders an individual child view for each model.\nconst CollectionView = Backbone.View.extend({\n\n  childViewEventPrefix: 'childview',\n\n  // flag for maintaining the sorted order of the collection\n  sort: true,\n\n  // constructor\n  // option to pass `{sort: false}` to prevent the `CollectionView` from\n  // maintaining the sorted order of the collection.\n  // This will fallback onto appending childView's to the end.\n  //\n  // option to pass `{viewComparator: compFunction()}` to allow the `CollectionView`\n  // to use a custom sort order for the collection.\n  constructor(options) {\n    this.render = _.bind(this.render, this);\n\n    this._setOptions(options);\n\n    this.mergeOptions(options, ClassOptions);\n\n    monitorViewEvents(this);\n\n    this._initBehaviors();\n    this.once('render', this._initialEvents);\n    this._initChildViewStorage();\n    this._bufferedChildren = [];\n\n    const args = Array.prototype.slice.call(arguments);\n    args[0] = this.options;\n    Backbone.View.prototype.constructor.apply(this, args);\n\n    this.delegateEntityEvents();\n\n    this._triggerEventOnBehaviors('initialize', this);\n  },\n\n  // Instead of inserting elements one by one into the page, it's much more performant to insert\n  // elements into a document fragment and then insert that document fragment into the page\n  _startBuffering() {\n    this._isBuffering = true;\n  },\n\n  _endBuffering() {\n    const shouldTriggerAttach = this._isAttached && this.monitorViewEvents !== false;\n    const triggerOnChildren = shouldTriggerAttach ? this._getImmediateChildren() : [];\n\n    this._isBuffering = false;\n\n    _.each(triggerOnChildren, child => {\n      triggerMethodOn(child, 'before:attach', child);\n    });\n\n    this.attachBuffer(this, this._createBuffer());\n\n    _.each(triggerOnChildren, child => {\n      child._isAttached = true;\n      triggerMethodOn(child, 'attach', child);\n    });\n\n    this._bufferedChildren = [];\n  },\n\n  _getImmediateChildren() {\n    return _.values(this.children._views);\n  },\n\n  // Configured the initial events that the collection view binds to.\n  _initialEvents() {\n    if (this.collection) {\n      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n      this.listenTo(this.collection, 'update', this._onCollectionUpdate);\n      this.listenTo(this.collection, 'reset', this.render);\n\n      if (this.sort) {\n        this.listenTo(this.collection, 'sort', this._sortViews);\n      }\n    }\n  },\n\n  // Handle a child added to the collection\n  _onCollectionAdd(child, collection, opts) {\n    // `index` is present when adding with `at` since BB 1.2; indexOf fallback for < 1.2\n    let index = opts.at !== undefined && (opts.index || collection.indexOf(child));\n\n    // When filtered or when there is no initial index, calculate index.\n    if (this.filter || index === false) {\n      index = _.indexOf(this._filteredSortedModels(index), child);\n    }\n\n    if (this._shouldAddChild(child, index)) {\n      this._destroyEmptyView();\n      this._addChild(child, index)\n    }\n  },\n\n  // Handle collection update model removals\n  _onCollectionUpdate(collection, options) {\n    const changes = options.changes;\n    this._removeChildModels(changes.removed);\n  },\n\n  // Remove the child views and destroy them.\n  // This function also updates the indices of later views\n  // in the collection in order to keep the children in sync with the collection.\n  // \"models\" is an array of models and the corresponding views\n  // will be removed and destroyed from the CollectionView\n  _removeChildModels(models) {\n    // Used to determine where to update the remaining\n    // sibling view indices after these views are removed.\n    const removedViews = this._getRemovedViews(models);\n\n    if (!removedViews.length) {\n      return;\n    }\n\n    this.children._updateLength();\n\n    // decrement the index of views after this one\n    this._updateIndices(removedViews, false);\n\n    if (this.isEmpty()) {\n      this._showEmptyView();\n    }\n  },\n\n  // Returns the views that will be used for re-indexing\n  // through CollectionView#_updateIndices.\n  _getRemovedViews(models) {\n\n    // Returning a view means something was removed.\n    return _.reduce(models, (removingViews, model) => {\n      const view = model && this.children.findByModel(model);\n\n      if (!view || view._isDestroyed) {\n        return removingViews;\n      }\n\n      this._removeChildView(view);\n\n      removingViews.push(view);\n\n      return removingViews;\n    }, []);\n  },\n\n  _removeChildView(view) {\n    this.triggerMethod('before:remove:child', this, view);\n\n    this.children._remove(view);\n    view._shouldDisableEvents = this.monitorViewEvents === false;\n    destroyView(view);\n\n    this.stopListening(view);\n    this.triggerMethod('remove:child', this, view);\n  },\n\n  // Overriding Backbone.View's `setElement` to handle\n  // if an el was previously defined. If so, the view might be\n  // attached on setElement.\n  setElement() {\n    const hasEl = !!this.el;\n\n    Backbone.View.prototype.setElement.apply(this, arguments);\n\n    if (hasEl) {\n      this._isAttached = isNodeAttached(this.el);\n    }\n\n    return this;\n  },\n\n  // Render children views. Override this method to provide your own implementation of a\n  // render function for the collection view.\n  render() {\n    if (this._isDestroyed) { return this; }\n    this.triggerMethod('before:render', this);\n    this._renderChildren();\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n    return this;\n  },\n\n  // An efficient rendering used for filtering. Instead of modifying the whole DOM for the\n  // collection view, we are only adding or removing the related childrenViews.\n  setFilter(filter, {preventRender} = {}) {\n    const canBeRendered = this._isRendered && !this._isDestroyed;\n    const filterChanged = this.filter !== filter;\n    const shouldRender = canBeRendered && filterChanged && !preventRender;\n\n    if (shouldRender) {\n      const previousModels = this._filteredSortedModels();\n      this.filter = filter;\n      const models = this._filteredSortedModels();\n      this._applyModelDeltas(models, previousModels);\n    } else {\n      this.filter = filter;\n    }\n\n    return this;\n  },\n\n  // `removeFilter` is actually an alias for removing filters.\n  removeFilter(options) {\n    return this.setFilter(null, options);\n  },\n\n  // Calculate and apply difference by cid between `models` and `previousModels`.\n  _applyModelDeltas(models, previousModels) {\n    const currentIds = {};\n    _.each(models, (model, index) => {\n      const addedChildNotExists = !this.children.findByModel(model);\n      if (addedChildNotExists) {\n        this._onCollectionAdd(model, this.collection, {at: index});\n      }\n      currentIds[model.cid] = true;\n    });\n\n    const removeModels = _.filter(previousModels, (prevModel) => {\n      return !currentIds[prevModel.cid] && this.children.findByModel(prevModel);\n    });\n\n    this._removeChildModels(removeModels);\n  },\n\n  // Reorder DOM after sorting. When your element's rendering do not use their index,\n  // you can pass reorderOnSort: true to only reorder the DOM after a sort instead of\n  // rendering all the collectionView.\n  reorder() {\n    const children = this.children;\n    const models = this._filteredSortedModels();\n\n    if (!models.length && this._showingEmptyView) { return this; }\n\n    const anyModelsAdded = _.some(models, function(model) {\n      return !children.findByModel(model);\n    });\n\n    // If there are any new models added due to filtering we need to add child views,\n    // so render as normal.\n    if (anyModelsAdded) {\n      this.render();\n    } else {\n\n      const filteredOutModels = [];\n\n      // Get the DOM nodes in the same order as the models and\n      // find the model that were children before but aren't in this new order.\n      const elsToReorder = _.reduce(this.children._views, function(viewEls, view) {\n        const index = _.indexOf(models, view.model);\n\n        if (index === -1) {\n          filteredOutModels.push(view.model);\n          return viewEls;\n        }\n\n        view._index = index;\n\n        viewEls[index] = view.el;\n\n        return viewEls;\n      }, new Array(models.length));\n\n      this.triggerMethod('before:reorder', this);\n\n      const elBuffer = this.Dom.createBuffer();\n\n      _.each(elsToReorder, (el) => {\n        this.Dom.appendContents(elBuffer, el);\n      });\n\n      // Since append moves elements that are already in the DOM, appending the elements\n      // will effectively reorder them.\n      this._appendReorderedChildren(elBuffer);\n\n      // remove any views that have been filtered out\n      this._removeChildModels(filteredOutModels);\n\n      this.triggerMethod('reorder', this);\n    }\n    return this;\n  },\n\n  // Render view after sorting. Override this method to change how the view renders\n  // after a `sort` on the collection.\n  resortView() {\n    if (this.reorderOnSort) {\n      this.reorder();\n    } else {\n      this._renderChildren();\n    }\n    return this;\n  },\n\n  // Internal method. This checks for any changes in the order of the collection.\n  // If the index of any view doesn't match, it will render.\n  _sortViews() {\n    const models = this._filteredSortedModels();\n\n    // check for any changes in sort order of views\n    const orderChanged = _.find(models, (item, index) => {\n      const view = this.children.findByModel(item);\n      return !view || view._index !== index;\n    });\n\n    if (orderChanged) {\n      this.resortView();\n    }\n  },\n\n  // Internal reference to what index a `emptyView` is.\n  _emptyViewIndex: -1,\n\n  // Internal method. Separated so that CompositeView can append to the childViewContainer\n  // if necessary\n  _appendReorderedChildren(children) {\n    this.Dom.appendContents(this.el, children, {_$el: this.$el});\n  },\n\n  // Internal method. Separated so that CompositeView can have more control over events\n  // being triggered, around the rendering process\n  _renderChildren() {\n    if (this._isRendered) {\n      this._destroyEmptyView();\n      this._destroyChildren();\n    }\n\n    const models = this._filteredSortedModels();\n    if (this.isEmpty({processedModels: models})) {\n      this._showEmptyView();\n    } else {\n      this.triggerMethod('before:render:children', this);\n      this._startBuffering();\n      this._showCollection(models);\n      this._endBuffering();\n      this.triggerMethod('render:children', this);\n    }\n  },\n\n  _createView(model, index) {\n    const ChildView = this._getChildView(model);\n    const childViewOptions = this._getChildViewOptions(model, index);\n    const view = this.buildChildView(model, ChildView, childViewOptions);\n    return view;\n  },\n\n  _setupChildView(view, index) {\n    monitorViewEvents(view);\n\n    // set up the child view event forwarding\n    this._proxyChildViewEvents(view);\n\n    if (this.sort) {\n      view._index = index;\n    }\n  },\n\n  // Internal method to loop through collection and show each child view.\n  _showCollection(models) {\n    _.each(models, _.bind(this._addChild, this));\n    this.children._updateLength();\n  },\n\n  // Allow the collection to be sorted by a custom view comparator\n  _filteredSortedModels(addedAt) {\n    if (!this.collection || !this.collection.length) { return []; }\n\n    const viewComparator = this.getViewComparator();\n    let models = this.collection.models;\n    addedAt = Math.min(Math.max(addedAt, 0), models.length - 1);\n\n    if (viewComparator) {\n      let addedModel;\n      // Preserve `at` location, even for a sorted view\n      if (addedAt) {\n        addedModel = models[addedAt];\n        models = models.slice(0, addedAt).concat(models.slice(addedAt + 1));\n      }\n      models = this._sortModelsBy(models, viewComparator);\n      if (addedModel) {\n        models.splice(addedAt, 0, addedModel);\n      }\n    }\n\n    // Filter after sorting in case the filter uses the index\n    models = this._filterModels(models);\n\n    return models;\n  },\n\n  getViewComparator() {\n    return this.viewComparator;\n  },\n\n  // Filter an array of models, if a filter exists\n  _filterModels(models) {\n    if (this.filter) {\n      models = _.filter(models, (model, index) => {\n        return this._shouldAddChild(model, index);\n      });\n    }\n    return models;\n  },\n\n  _sortModelsBy(models, comparator) {\n    if (typeof comparator === 'string') {\n      return _.sortBy(models, (model) => {\n        return model.get(comparator);\n      });\n    } else if (comparator.length === 1) {\n      return _.sortBy(models, _.bind(comparator, this));\n    } else {\n      return _.clone(models).sort(_.bind(comparator, this));\n    }\n  },\n\n  // Internal method to show an empty view in place of a collection of child views,\n  // when the collection is empty\n  _showEmptyView() {\n    const EmptyView = this._getEmptyView();\n\n    if (EmptyView && !this._showingEmptyView) {\n      this._showingEmptyView = true;\n\n      const model = new Backbone.Model();\n      let emptyViewOptions =\n        this.emptyViewOptions || this.childViewOptions;\n      if (_.isFunction(emptyViewOptions)) {\n        emptyViewOptions = emptyViewOptions.call(this, model, this._emptyViewIndex);\n      }\n\n      const view = this.buildChildView(model, EmptyView, emptyViewOptions);\n\n      this.triggerMethod('before:render:empty', this, view);\n      this.addChildView(view, 0);\n      this.triggerMethod('render:empty', this, view);\n    }\n  },\n\n  // Internal method to destroy an existing emptyView instance if one exists. Called when\n  // a collection view has been rendered empty, and then a child is added to the collection.\n  _destroyEmptyView() {\n    if (this._showingEmptyView) {\n      this.triggerMethod('before:remove:empty', this);\n\n      this._destroyChildren();\n      delete this._showingEmptyView;\n\n      this.triggerMethod('remove:empty', this);\n    }\n  },\n\n  // Retrieve the empty view class\n  _getEmptyView() {\n    const emptyView = this.emptyView;\n\n    if (!emptyView) { return; }\n\n    return this._getView(emptyView);\n  },\n\n  // Retrieve the `childView` class\n  // The `childView` property can be either a view class or a function that\n  // returns a view class. If it is a function, it will receive the model that\n  // will be passed to the view instance (created from the returned view class)\n  _getChildView(child) {\n    let childView = this.childView;\n\n    if (!childView) {\n      throw new MarionetteError({\n        name: 'NoChildViewError',\n        message: 'A \"childView\" must be specified'\n      });\n    }\n\n    childView = this._getView(childView, child);\n\n    if (!childView) {\n      throw new MarionetteError({\n        name: 'InvalidChildViewError',\n        message: '\"childView\" must be a view class or a function that returns a view class'\n      });\n    }\n\n    return childView;\n  },\n\n  // First check if the `view` is a view class (the common case)\n  // Then check if it's a function (which we assume that returns a view class)\n  _getView(view, child) {\n    if (view.prototype instanceof Backbone.View || view === Backbone.View) {\n      return view;\n    } else if (_.isFunction(view)) {\n      return view.call(this, child);\n    }\n  },\n\n  // Internal method for building and adding a child view\n  _addChild(child, index) {\n    const view = this._createView(child, index);\n    this.addChildView(view, index);\n\n    return view;\n  },\n\n  _getChildViewOptions(child, index) {\n    if (_.isFunction(this.childViewOptions)) {\n      return this.childViewOptions(child, index);\n    }\n\n    return this.childViewOptions;\n  },\n\n  // Render the child's view and add it to the HTML for the collection view at a given index.\n  // This will also update the indices of later views in the collection in order to keep the\n  // children in sync with the collection.\n  addChildView(view, index) {\n    this.triggerMethod('before:add:child', this, view);\n    this._setupChildView(view, index);\n\n    // Store the child view itself so we can properly remove and/or destroy it later\n    if (this._isBuffering) {\n      // Add to children, but don't update children's length.\n      this.children._add(view);\n    } else {\n      // increment indices of views after this one\n      this._updateIndices(view, true);\n      this.children.add(view);\n    }\n\n    renderView(view);\n\n    this._attachView(view, index);\n\n    this.triggerMethod('add:child', this, view);\n\n    return view;\n  },\n\n  // Internal method. This decrements or increments the indices of views after the added/removed\n  // view to keep in sync with the collection.\n  _updateIndices(views, increment) {\n    if (!this.sort) {\n      return;\n    }\n\n    if (!increment) {\n      _.each(_.sortBy(this.children._views, '_index'), (view, index) => {\n        view._index = index;\n      });\n\n      return;\n    }\n\n    const view = _.isArray(views) ? _.max(views, '_index') : views;\n\n    if (_.isObject(view)) {\n      // update the indexes of views after this one\n      _.each(this.children._views, (laterView) => {\n        if (laterView._index >= view._index) {\n          laterView._index += 1;\n        }\n      });\n    }\n  },\n\n  _attachView(view, index) {\n    // Only trigger attach if already attached and not buffering,\n    // otherwise _endBuffering() or Region#show() handles this.\n    const shouldTriggerAttach = !view._isAttached && !this._isBuffering && this._isAttached && this.monitorViewEvents !== false;\n\n    if (shouldTriggerAttach) {\n      triggerMethodOn(view, 'before:attach', view);\n    }\n\n    this.attachHtml(this, view, index);\n\n    if (shouldTriggerAttach) {\n      view._isAttached = true;\n      triggerMethodOn(view, 'attach', view);\n    }\n  },\n\n  // Build a `childView` for a model in the collection.\n  buildChildView(child, ChildViewClass, childViewOptions) {\n    const options = _.extend({model: child}, childViewOptions);\n    return new ChildViewClass(options);\n  },\n\n  // Remove the child view and destroy it. This function also updates the indices of later views\n  // in the collection in order to keep the children in sync with the collection.\n  removeChildView(view) {\n    if (!view || view._isDestroyed) {\n      return view;\n    }\n\n    this._removeChildView(view);\n    this.children._updateLength();\n    // decrement the index of views after this one\n    this._updateIndices(view, false);\n    return view;\n  },\n\n  // check if the collection is empty or optionally whether an array of pre-processed models is empty\n  isEmpty(options) {\n    let models;\n    if (_.result(options, 'processedModels')) {\n      models = options.processedModels;\n    } else {\n      models = this.collection ? this.collection.models : [];\n      models = this._filterModels(models);\n    }\n    return models.length === 0;\n  },\n\n  // You might need to override this if you've overridden attachHtml\n  attachBuffer(collectionView, buffer) {\n    this.Dom.appendContents(collectionView.el, buffer, {_$el: collectionView.$el});\n  },\n\n  // Create a fragment buffer from the currently buffered children\n  _createBuffer() {\n    const elBuffer = this.Dom.createBuffer();\n    _.each(this._bufferedChildren, (b) => {\n      this.Dom.appendContents(elBuffer, b.el, {_$contents: b.$el});\n    });\n    return elBuffer;\n  },\n\n  // Append the HTML to the collection's `el`. Override this method to do something other\n  // than `.append`.\n  attachHtml(collectionView, childView, index) {\n    if (collectionView._isBuffering) {\n      // buffering happens on reset events and initial renders\n      // in order to reduce the number of inserts into the\n      // document, which are expensive.\n      collectionView._bufferedChildren.splice(index, 0, childView);\n    } else {\n      // If we've already rendered the main collection, append\n      // the new child into the correct order if we need to. Otherwise\n      // append to the end.\n      if (!collectionView._insertBefore(childView, index)) {\n        collectionView._insertAfter(childView);\n      }\n    }\n  },\n\n  // Internal method. Check whether we need to insert the view into the correct position.\n  _insertBefore(childView, index) {\n    let currentView;\n    const findPosition = this.sort && (index < this.children.length - 1);\n    if (findPosition) {\n      // Find the view after this one\n      currentView = _.find(this.children._views, (view) => {\n        return view._index === index + 1;\n      });\n    }\n\n    if (currentView) {\n      this.beforeEl(currentView.el, childView.el);\n      return true;\n    }\n\n    return false;\n  },\n\n  // Override to handle DOM inserting differently\n  beforeEl(el, siblings) {\n    this.$(el).before(siblings);\n  },\n\n  // Internal method. Append a view to the end of the $el\n  _insertAfter(childView) {\n    this.Dom.appendContents(this.el, childView.el, {_$el: this.$el, _$contents: childView.$el});\n  },\n\n  // Internal method to set up the `children` object for storing all of the child views\n  _initChildViewStorage() {\n    this.children = new ChildViewContainer();\n  },\n\n  // called by ViewMixin destroy\n  _removeChildren() {\n    this._destroyChildren();\n  },\n\n  // Destroy the child views that this collection view is holding on to, if any\n  _destroyChildren(options) {\n    if (!this.children.length) {\n      return;\n    }\n\n    this.triggerMethod('before:destroy:children', this);\n    _.each(this.children._views, _.bind(this._removeChildView, this));\n    this.children._updateLength();\n    this.triggerMethod('destroy:children', this);\n  },\n\n  // Return true if the given child should be shown. Return false otherwise.\n  // The filter will be passed (child, index, collection), where\n  //  'child' is the given model\n  //  'index' is the index of that model in the collection\n  //  'collection' is the collection referenced by this CollectionView\n  _shouldAddChild(child, index) {\n    const filter = this.filter;\n    return !_.isFunction(filter) || filter.call(this, child, index, this.collection);\n  }\n}, {\n  setDomApi\n});\n\n_.extend(CollectionView.prototype, ViewMixin);\n\nexport default CollectionView;\n","// Composite View\n// --------------\n\nimport _ from 'underscore';\nimport { View } from 'backbone.marionette';\nimport CollectionView from './collection-view';\nimport MarionetteError from './error';\n\nconst ClassOptions = [\n  'childViewContainer',\n  'template',\n  'templateContext'\n];\n\n// Used for rendering a branch-leaf, hierarchical structure.\n// Extends directly from CollectionView\n// @deprecated\nconst CompositeView = CollectionView.extend({\n\n  // Setting up the inheritance chain which allows changes to\n  // Marionette.CollectionView.prototype.constructor which allows overriding\n  // option to pass '{sort: false}' to prevent the CompositeView from\n  // maintaining the sorted order of the collection.\n  // This will fallback onto appending childView's to the end.\n  constructor(options) {\n    this.mergeOptions(options, ClassOptions);\n\n    CollectionView.prototype.constructor.apply(this, arguments);\n  },\n\n  // Configured the initial events that the composite view\n  // binds to. Override this method to prevent the initial\n  // events, or to add your own initial events.\n  _initialEvents() {\n\n    // Bind only after composite view is rendered to avoid adding child views\n    // to nonexistent childViewContainer\n\n    if (this.collection) {\n      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n      this.listenTo(this.collection, 'update', this._onCollectionUpdate);\n      this.listenTo(this.collection, 'reset', this.renderChildren);\n\n      if (this.sort) {\n        this.listenTo(this.collection, 'sort', this._sortViews);\n      }\n    }\n  },\n\n  // Retrieve the `childView` to be used when rendering each of\n  // the items in the collection. The default is to return\n  // `this.childView` or Marionette.CompositeView if no `childView`\n  // has been defined. As happens in CollectionView, `childView` can\n  // be a function (which should return a view class).\n  _getChildView(child) {\n    let childView = this.childView;\n\n    // for CompositeView, if `childView` is not specified, we'll get the same\n    // composite view class rendered for each child in the collection\n    // then check if the `childView` is a view class (the common case)\n    // finally check if it's a function (which we assume that returns a view class)\n    if (!childView) {\n      return this.constructor;\n    }\n\n    childView = this._getView(childView, child);\n\n    if (!childView) {\n      throw new MarionetteError({\n        name: 'InvalidChildViewError',\n        message: '\"childView\" must be a view class or a function that returns a view class'\n      });\n    }\n\n    return childView;\n  },\n\n  // Return the serialized model\n  serializeData() {\n    if (this.model) { return this.serializeModel(); }\n  },\n\n  // Renders the model and the collection.\n  render() {\n    if (this._isDestroyed) { return this; }\n    this._isRendering = true;\n    this.resetChildViewContainer();\n\n    this.triggerMethod('before:render', this);\n\n    const template = this.getTemplate();\n    if (template !== false) { this._renderTemplate(template); }\n    this.bindUIElements();\n    this.renderChildren();\n\n    this._isRendering = false;\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n    return this;\n  },\n\n  renderChildren() {\n    if (this._isRendered || this._isRendering) {\n      CollectionView.prototype._renderChildren.call(this);\n    }\n  },\n\n  // You might need to override this if you've overridden attachHtml\n  attachBuffer(compositeView, buffer) {\n    const $container = this.getChildViewContainer(compositeView);\n    this.Dom.appendContents($container[0], buffer, {_$el: $container});\n  },\n\n  // Internal method. Append a view to the end of the $el.\n  // Overidden from CollectionView to ensure view is appended to\n  // childViewContainer\n  _insertAfter(childView) {\n    const $container = this.getChildViewContainer(this, childView);\n    this.Dom.appendContents($container[0], childView.el, {_$el: $container, _$contents: childView.$el});\n  },\n\n  // Internal method. Append reordered childView'.\n  // Overidden from CollectionView to ensure reordered views\n  // are appended to childViewContainer\n  _appendReorderedChildren(children) {\n    const $container = this.getChildViewContainer(this);\n    this.Dom.appendContents($container[0], children, {_$el: $container});\n  },\n\n  // Internal method to ensure an `$childViewContainer` exists, for the\n  // `attachHtml` method to use.\n  getChildViewContainer(containerView, childView) {\n    if (!!containerView.$childViewContainer) {\n      return containerView.$childViewContainer;\n    }\n\n    let container;\n    const childViewContainer = containerView.childViewContainer;\n    if (childViewContainer) {\n\n      const selector = _.result(containerView, 'childViewContainer');\n\n      if (selector.charAt(0) === '@' && containerView.ui) {\n        container = containerView.ui[selector.substr(4)];\n      } else {\n        container = this.$(selector);\n      }\n\n      if (container.length <= 0) {\n        throw new MarionetteError({\n          name: 'ChildViewContainerMissingError',\n          message: `The specified \"childViewContainer\" was not found: ${containerView.childViewContainer}`\n        });\n      }\n\n    } else {\n      container = containerView.$el;\n    }\n\n    containerView.$childViewContainer = container;\n    return container;\n  },\n\n  // Internal method to reset the `$childViewContainer` on render\n  resetChildViewContainer() {\n    if (this.$childViewContainer) {\n      this.$childViewContainer = undefined;\n    }\n  }\n});\n\n// To prevent duplication but allow the best View organization\n// Certain View methods are mixed directly into the deprecated CompositeView\nconst MixinFromView = _.pick(View.prototype, 'serializeModel', 'getTemplate', '_renderTemplate', '_renderHtml', 'mixinTemplateContext', 'attachElContent');\n_.extend(CompositeView.prototype, MixinFromView);\n\nexport default CompositeView;\n","import Marionette from 'backbone.marionette';\nimport OldCollectionView from './collection-view';\nimport OldCompositeView from './composite-view';\n\n// Support the default export\nMarionette.OldCollectionView = OldCollectionView;\nMarionette.OldCompositeView = OldCompositeView;\n\nexport { OldCollectionView, OldCompositeView }\n"],"names":["extend","View","errorProps","MarionetteError","call","Error","message","options","_","isObject","error","pick","captureStackTrace","url","urlRoot","name","splitter","getEventName","match","prefix","eventName","toUpperCase","getOnMethodName","memoize","event","replace","triggerMethod","args","methodName","method","getOption","result","isFunction","apply","trigger","arguments","triggerMethodOn","context","Marionette","renderView","view","_isRendered","supportsRenderLifecycle","render","destroyView","destroy","supportsDestroyLifecycle","shouldTriggerDetach","_isAttached","_shouldDisableEvents","remove","_isDestroyed","triggerMethodChildren","shouldTrigger","_getImmediateChildren","each","child","shouldTriggerAttach","shouldAttach","shouldDetach","triggerDOMRefresh","triggerDOMRemove","handleBeforeAttach","handleAttach","handleBeforeDetach","handleDetach","handleBeforeRender","handleRender","monitorViewEvents","_areViewEventsMonitored","on","methods","emulateCollection","object","listProperty","list","Array","prototype","slice","concat","Container","views","_views","_indexByModel","_indexByCustom","_updateLength","bind","add","values","customIndex","_add","viewCid","cid","model","findByModelCid","modelCid","findByCid","index","_remove","some","key","length","size","isNodeAttached","el","document","documentElement","contains","parentNode","setDomApi","ViewMixin","ClassOptions","CollectionView","Backbone","_setOptions","mergeOptions","_initBehaviors","once","_initialEvents","_initChildViewStorage","_bufferedChildren","constructor","delegateEntityEvents","_triggerEventOnBehaviors","_isBuffering","triggerOnChildren","attachBuffer","_createBuffer","children","collection","listenTo","_onCollectionAdd","_onCollectionUpdate","sort","_sortViews","opts","at","undefined","indexOf","filter","_filteredSortedModels","_shouldAddChild","_destroyEmptyView","_addChild","changes","_removeChildModels","removed","models","removedViews","_getRemovedViews","_updateIndices","isEmpty","_showEmptyView","reduce","removingViews","findByModel","_removeChildView","push","stopListening","hasEl","setElement","_renderChildren","preventRender","canBeRendered","filterChanged","shouldRender","previousModels","_applyModelDeltas","setFilter","currentIds","addedChildNotExists","removeModels","prevModel","_showingEmptyView","anyModelsAdded","filteredOutModels","elsToReorder","viewEls","_index","elBuffer","Dom","createBuffer","appendContents","_appendReorderedChildren","reorderOnSort","reorder","orderChanged","find","item","resortView","_$el","$el","_destroyChildren","processedModels","_startBuffering","_showCollection","_endBuffering","ChildView","_getChildView","childViewOptions","_getChildViewOptions","buildChildView","_proxyChildViewEvents","addedAt","viewComparator","getViewComparator","Math","min","max","addedModel","_sortModelsBy","splice","_filterModels","comparator","sortBy","get","clone","EmptyView","_getEmptyView","Model","emptyViewOptions","_emptyViewIndex","addChildView","emptyView","_getView","childView","_createView","_setupChildView","_attachView","increment","isArray","laterView","attachHtml","ChildViewClass","collectionView","buffer","b","_$contents","_insertBefore","_insertAfter","currentView","findPosition","beforeEl","siblings","$","before","ChildViewContainer","CompositeView","renderChildren","serializeModel","_isRendering","resetChildViewContainer","template","getTemplate","_renderTemplate","bindUIElements","compositeView","$container","getChildViewContainer","containerView","$childViewContainer","container","childViewContainer","selector","charAt","ui","substr","MixinFromView","OldCollectionView","OldCompositeView"],"mappings":"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"}