{"version":3,"file":"marionette.oldcollectionview.esm.js","sources":["src/common/trigger-method.js","src/common/view.js","src/common/monitor-view-events.js","src/utils/emulate-collection.js","src/child-view-container.js","src/collection-view.js","src/composite-view.js","src/old.js"],"sourcesContent":["// Trigger Method\n// --------------\n\nimport _ from 'underscore';\nimport Marionette from 'backbone.marionette';\n\n// split the event name on the \":\"\nconst splitter = /(^|:)(\\w)/gi;\n\n// take the event section (\"section1:section2:section3\")\n// and turn it in to uppercase name onSection1Section2Section3\nfunction getEventName(match, prefix, eventName) {\n  return eventName.toUpperCase();\n}\n\nconst getOnMethodName = _.memoize(function(event) {\n  return 'on' + event.replace(splitter, getEventName);\n});\n\n// Trigger an event and/or a corresponding method name. Examples:\n//\n// `this.triggerMethod(\"foo\")` will trigger the \"foo\" event and\n// call the \"onFoo\" method.\n//\n// `this.triggerMethod(\"foo:bar\")` will trigger the \"foo:bar\" event and\n// call the \"onFooBar\" method.\nexport function triggerMethod(event, ...args) {\n  // get the method name from the event name\n  const methodName = getOnMethodName(event);\n  const method = Marionette.getOption(this, methodName);\n  let result;\n\n  // call the onMethodName if it exists\n  if (_.isFunction(method)) {\n    // pass all args, except the event name\n    result = method.apply(this, args);\n  }\n\n  // trigger the event\n  this.trigger.apply(this, arguments);\n\n  return result;\n}\n\n// triggerMethodOn invokes triggerMethod on a specific context\n//\n// e.g. `Marionette.triggerMethodOn(view, 'show')`\n// will trigger a \"show\" event or invoke onShow the view.\nexport function triggerMethodOn(context, ...args) {\n  if (_.isFunction(context.triggerMethod)) {\n    return context.triggerMethod.apply(context, args);\n  }\n\n  return triggerMethod.apply(context, args);\n}\n","import { triggerMethodOn } from '../common/trigger-method';\n\nexport function renderView(view) {\n  if (view._isRendered) {\n    return;\n  }\n\n  if (!view.supportsRenderLifecycle) {\n    triggerMethodOn(view, 'before:render', view);\n  }\n\n  view.render();\n\n  if (!view.supportsRenderLifecycle) {\n    view._isRendered = true;\n    triggerMethodOn(view, 'render', view);\n  }\n}\n\nexport function destroyView(view) {\n  if (view.destroy) {\n    view.destroy();\n    return;\n  }\n\n  if (!view.supportsDestroyLifecycle) {\n    triggerMethodOn(view, 'before:destroy', view);\n  }\n\n  const shouldTriggerDetach = view._isAttached && !view._shouldDisableEvents;\n\n  if (shouldTriggerDetach) {\n    triggerMethodOn(view, 'before:detach', view);\n  }\n\n  view.remove();\n\n  if (shouldTriggerDetach) {\n    view._isAttached = false;\n    triggerMethodOn(view, 'detach', view);\n  }\n\n  view._isDestroyed = true;\n\n  if (!view.supportsDestroyLifecycle) {\n    triggerMethodOn(view, 'destroy', view);\n  }\n}\n","// DOM Refresh\n// -----------\n\nimport _ from 'underscore';\nimport { triggerMethodOn } from './trigger-method';\n\n// Trigger method on children unless a pure Backbone.View\nfunction triggerMethodChildren(view, event, shouldTrigger) {\n  if (!view._getImmediateChildren) { return; }\n  _.each(view._getImmediateChildren(), child => {\n    if (!shouldTrigger(child)) { return; }\n    triggerMethodOn(child, event, child);\n  });\n}\n\nfunction shouldTriggerAttach(view) {\n  return !view._isAttached;\n}\n\nfunction shouldAttach(view) {\n  if (!shouldTriggerAttach(view)) { return false; }\n  view._isAttached = true;\n  return true;\n}\n\nfunction shouldTriggerDetach(view) {\n  return view._isAttached;\n}\n\nfunction shouldDetach(view) {\n  if (!shouldTriggerDetach(view)) { return false; }\n  view._isAttached = false;\n  return true;\n}\n\nfunction triggerDOMRefresh(view) {\n  if (view._isAttached && view._isRendered) {\n    triggerMethodOn(view, 'dom:refresh', view);\n  }\n}\n\nfunction triggerDOMRemove(view) {\n  if (view._isAttached && view._isRendered) {\n    triggerMethodOn(view, 'dom:remove', view);\n  }\n}\n\nfunction handleBeforeAttach() {\n  triggerMethodChildren(this, 'before:attach', shouldTriggerAttach);\n}\n\nfunction handleAttach() {\n  triggerMethodChildren(this, 'attach', shouldAttach);\n  triggerDOMRefresh(this);\n}\n\nfunction handleBeforeDetach() {\n  triggerMethodChildren(this, 'before:detach', shouldTriggerDetach);\n  triggerDOMRemove(this);\n}\n\nfunction handleDetach() {\n  triggerMethodChildren(this, 'detach', shouldDetach);\n}\n\nfunction handleBeforeRender() {\n  triggerDOMRemove(this);\n}\n\nfunction handleRender() {\n  triggerDOMRefresh(this);\n}\n\n// Monitor a view's state, propagating attach/detach events to children and firing dom:refresh\n// whenever a rendered view is attached or an attached view is rendered.\nfunction monitorViewEvents(view) {\n  if (view._areViewEventsMonitored || view.monitorViewEvents === false) { return; }\n\n  view._areViewEventsMonitored = true;\n\n  view.on({\n    'before:attach': handleBeforeAttach,\n    'attach': handleAttach,\n    'before:detach': handleBeforeDetach,\n    'detach': handleDetach,\n    'before:render': handleBeforeRender,\n    'render': handleRender\n  });\n}\n\nexport default monitorViewEvents;\n","// Mix in methods from Underscore, for iteration, and other\n// collection related features.\n// Borrowing this code from Backbone.Collection:\n// https://github.com/jashkenas/backbone/blob/1.1.2/backbone.js#L962\n\nimport _ from 'underscore';\n\nconst methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter',\n                'select', 'reject', 'every', 'all', 'some', 'any', 'include',\n                'contains', 'invoke', 'toArray', 'first', 'initial', 'rest',\n                'last', 'without', 'isEmpty', 'pluck', 'reduce', 'partition'];\n\nconst emulateCollection = function(object, listProperty) {\n  _.each(methods, function(method) {\n    object[method] = function() {\n      const list = _.result(this, listProperty);\n      const args = Array.prototype.slice.call(arguments);\n      return _[method].apply(_, [list].concat(args));\n    };\n  });\n};\n\nexport default emulateCollection;\n","import _ from 'underscore';\nimport emulateCollection from './utils/emulate-collection';\n\n// Provide a container to store, retrieve and\n// shut down child views.\nconst Container = function(views) {\n  this._views = {};\n  this._indexByModel = {};\n  this._indexByCustom = {};\n  this._updateLength();\n\n  _.each(views, _.bind(this.add, this));\n};\n\nemulateCollection(Container.prototype, '_getViews');\n\n// Container Methods\n// -----------------\n\n_.extend(Container.prototype, {\n\n  _getViews() {\n    return _.values(this._views);\n  },\n\n  // Add a view to this container. Stores the view\n  // by `cid` and makes it searchable by the model\n  // cid (and model itself). Optionally specify\n  // a custom key to store an retrieve the view.\n  add(view, customIndex) {\n    return this._add(view, customIndex)._updateLength();\n  },\n\n  // To be used when avoiding call _updateLength\n  // When you are done adding all your new views\n  // call _updateLength\n  _add(view, customIndex) {\n    const viewCid = view.cid;\n\n    // store the view\n    this._views[viewCid] = view;\n\n    // index it by model\n    if (view.model) {\n      this._indexByModel[view.model.cid] = viewCid;\n    }\n\n    // index by custom\n    if (customIndex) {\n      this._indexByCustom[customIndex] = viewCid;\n    }\n\n    return this;\n  },\n\n  // Find a view by the model that was attached to\n  // it. Uses the model's `cid` to find it.\n  findByModel(model) {\n    return this.findByModelCid(model.cid);\n  },\n\n  // Find a view by the `cid` of the model that was attached to\n  // it. Uses the model's `cid` to find the view `cid` and\n  // retrieve the view using it.\n  findByModelCid(modelCid) {\n    const viewCid = this._indexByModel[modelCid];\n    return this.findByCid(viewCid);\n  },\n\n  // Find a view by a custom indexer.\n  findByCustom(index) {\n    const viewCid = this._indexByCustom[index];\n    return this.findByCid(viewCid);\n  },\n\n  // Find by index. This is not guaranteed to be a\n  // stable index.\n  findByIndex(index) {\n    return _.values(this._views)[index];\n  },\n\n  // retrieve a view by its `cid` directly\n  findByCid(cid) {\n    return this._views[cid];\n  },\n\n  // Remove a view\n  remove(view) {\n    return this._remove(view)._updateLength();\n  },\n\n  // To be used when avoiding call _updateLength\n  // When you are done adding all your new views\n  // call _updateLength\n  _remove(view) {\n    const viewCid = view.cid;\n\n    // delete model index\n    if (view.model) {\n      delete this._indexByModel[view.model.cid];\n    }\n\n    // delete custom index\n    _.some(this._indexByCustom, _.bind(function(cid, key) {\n      if (cid === viewCid) {\n        delete this._indexByCustom[key];\n        return true;\n      }\n    }, this));\n\n    // remove the view from the container\n    delete this._views[viewCid];\n\n    return this;\n  },\n\n  // Update the `.length` attribute on this container\n  _updateLength() {\n    this.length = _.size(this._views);\n\n    return this;\n  }\n});\n\nexport default Container;\n","// Collection View\n// ---------------\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\nimport Marionette from 'backbone.marionette';\n\nimport { renderView, destroyView } from './common/view';\nimport monitorViewEvents from './common/monitor-view-events';\nimport { triggerMethodOn } from './common/trigger-method';\nimport ChildViewContainer from './child-view-container';\n\nconst setDomApi = Marionette.View.setDomApi;\n\nconst ViewMixin = _.pick(Marionette.View.prototype,\n  'Dom',\n  'supportsRenderLifecycle',\n  'supportsDestroyLifecycle',\n  '_isDestroyed',\n  'isDestroyed',\n  '_isRendered',\n  'isRendered',\n  '_isAttached',\n  'isAttached',\n  'delegateEvents',\n  '_getEvents',\n  'getTriggers',\n  'delegateEntityEvents',\n  'undelegateEntityEvents',\n  'destroy',\n  '_removeElement',\n  'bindUIElements',\n  'unbindUIElements',\n  'getUI',\n  'childViewEventPrefix',\n  'triggerMethod',\n  '_buildEventProxies',\n  '_proxyChildViewEvents',\n  '_childViewEventHandler',\n  // BehaviorsMixin\n  '_initBehaviors',\n  '_getBehaviors',\n  '_getBehaviorTriggers',\n  '_getBehaviorEvents',\n  '_proxyBehaviorViewProperties',\n  '_delegateBehaviorEntityEvents',\n  '_undelegateBehaviorEntityEvents',\n  '_destroyBehaviors',\n  '_removeBehavior',\n  '_bindBehaviorUIElements',\n  '_unbindBehaviorUIElements',\n  '_triggerEventOnBehaviors',\n  // CommonMixin\n  'normalizeMethods',\n  '_setOptions',\n  'mergeOptions',\n  'getOption',\n  'bindEvents',\n  'unbindEvents',\n  // DelegateEntityEventsMixin\n  '_delegateEntityEvents',\n  '_undelegateEntityEvents',\n  // TriggersMixin\n  '_getViewTriggers',\n  // UIMixin\n  'normalizeUIKeys',\n  'normalizeUIString',\n  'normalizeUIValues',\n  '_getUIBindings',\n  '_bindUIElements',\n  '_unbindUIElements',\n  '_getUI'\n);\n\nconst isNodeAttached = Marionette.isNodeAttached;\nconst MarionetteError = Marionette.Error;\n\nconst ClassOptions = [\n  'behaviors',\n  'childView',\n  'childViewEventPrefix',\n  'childViewEvents',\n  'childViewOptions',\n  'childViewTriggers',\n  'collectionEvents',\n  'events',\n  'filter',\n  'emptyView',\n  'emptyViewOptions',\n  'modelEvents',\n  'reorderOnSort',\n  'sort',\n  'triggers',\n  'ui',\n  'viewComparator'\n];\n\n// A view that iterates over a Backbone.Collection\n// and renders an individual child view for each model.\nconst CollectionView = Backbone.View.extend({\n\n  // flag for maintaining the sorted order of the collection\n  sort: true,\n\n  // constructor\n  // option to pass `{sort: false}` to prevent the `CollectionView` from\n  // maintaining the sorted order of the collection.\n  // This will fallback onto appending childView's to the end.\n  //\n  // option to pass `{viewComparator: compFunction()}` to allow the `CollectionView`\n  // to use a custom sort order for the collection.\n  constructor(options) {\n    this.render = _.bind(this.render, this);\n\n    this._setOptions(options);\n\n    this.mergeOptions(options, ClassOptions);\n\n    monitorViewEvents(this);\n\n    this._initBehaviors();\n    this.once('render', this._initialEvents);\n    this._initChildViewStorage();\n    this._bufferedChildren = [];\n\n    const args = Array.prototype.slice.call(arguments);\n    args[0] = this.options;\n    Backbone.View.prototype.constructor.apply(this, args);\n\n    this.delegateEntityEvents();\n\n    this._triggerEventOnBehaviors('initialize', this);\n  },\n\n  // Instead of inserting elements one by one into the page, it's much more performant to insert\n  // elements into a document fragment and then insert that document fragment into the page\n  _startBuffering() {\n    this._isBuffering = true;\n  },\n\n  _endBuffering() {\n    const shouldTriggerAttach = this._isAttached && this.monitorViewEvents !== false;\n    const triggerOnChildren = shouldTriggerAttach ? this._getImmediateChildren() : [];\n\n    this._isBuffering = false;\n\n    _.each(triggerOnChildren, child => {\n      triggerMethodOn(child, 'before:attach', child);\n    });\n\n    this.attachBuffer(this, this._createBuffer());\n\n    _.each(triggerOnChildren, child => {\n      child._isAttached = true;\n      triggerMethodOn(child, 'attach', child);\n    });\n\n    this._bufferedChildren = [];\n  },\n\n  _getImmediateChildren() {\n    return _.values(this.children._views);\n  },\n\n  // Configured the initial events that the collection view binds to.\n  _initialEvents() {\n    if (this.collection) {\n      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n      this.listenTo(this.collection, 'update', this._onCollectionUpdate);\n      this.listenTo(this.collection, 'reset', this.render);\n\n      if (this.sort) {\n        this.listenTo(this.collection, 'sort', this._sortViews);\n      }\n    }\n  },\n\n  // Handle a child added to the collection\n  _onCollectionAdd(child, collection, opts) {\n    // `index` is present when adding with `at` since BB 1.2; indexOf fallback for < 1.2\n    let index = opts.at !== undefined && (opts.index || collection.indexOf(child));\n\n    // When filtered or when there is no initial index, calculate index.\n    if (this.filter || index === false) {\n      index = _.indexOf(this._filteredSortedModels(index), child);\n    }\n\n    if (this._shouldAddChild(child, index)) {\n      this._destroyEmptyView();\n      this._addChild(child, index)\n    }\n  },\n\n  // Handle collection update model removals\n  _onCollectionUpdate(collection, options) {\n    const changes = options.changes;\n    this._removeChildModels(changes.removed);\n  },\n\n  // Remove the child views and destroy them.\n  // This function also updates the indices of later views\n  // in the collection in order to keep the children in sync with the collection.\n  // \"models\" is an array of models and the corresponding views\n  // will be removed and destroyed from the CollectionView\n  _removeChildModels(models) {\n    // Used to determine where to update the remaining\n    // sibling view indices after these views are removed.\n    const removedViews = this._getRemovedViews(models);\n\n    if (!removedViews.length) {\n      return;\n    }\n\n    this.children._updateLength();\n\n    // decrement the index of views after this one\n    this._updateIndices(removedViews, false);\n\n    if (this.isEmpty()) {\n      this._showEmptyView();\n    }\n  },\n\n  // Returns the views that will be used for re-indexing\n  // through CollectionView#_updateIndices.\n  _getRemovedViews(models) {\n\n    // Returning a view means something was removed.\n    return _.reduce(models, (removingViews, model) => {\n      const view = model && this.children.findByModel(model);\n\n      if (!view || view._isDestroyed) {\n        return removingViews;\n      }\n\n      this._removeChildView(view);\n\n      removingViews.push(view);\n\n      return removingViews;\n    }, []);\n  },\n\n  _removeChildView(view) {\n    this.triggerMethod('before:remove:child', this, view);\n\n    this.children._remove(view);\n    view._shouldDisableEvents = this.monitorViewEvents === false;\n    destroyView(view);\n\n    this.stopListening(view);\n    this.triggerMethod('remove:child', this, view);\n  },\n\n  // Overriding Backbone.View's `setElement` to handle\n  // if an el was previously defined. If so, the view might be\n  // attached on setElement.\n  setElement() {\n    const hasEl = !!this.el;\n\n    Backbone.View.prototype.setElement.apply(this, arguments);\n\n    if (hasEl) {\n      this._isAttached = isNodeAttached(this.el);\n    }\n\n    return this;\n  },\n\n  // Render children views. Override this method to provide your own implementation of a\n  // render function for the collection view.\n  render() {\n    if (this._isDestroyed) { return this; }\n    this.triggerMethod('before:render', this);\n    this._renderChildren();\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n    return this;\n  },\n\n  // An efficient rendering used for filtering. Instead of modifying the whole DOM for the\n  // collection view, we are only adding or removing the related childrenViews.\n  setFilter(filter, {preventRender} = {}) {\n    const canBeRendered = this._isRendered && !this._isDestroyed;\n    const filterChanged = this.filter !== filter;\n    const shouldRender = canBeRendered && filterChanged && !preventRender;\n\n    if (shouldRender) {\n      const previousModels = this._filteredSortedModels();\n      this.filter = filter;\n      const models = this._filteredSortedModels();\n      this._applyModelDeltas(models, previousModels);\n    } else {\n      this.filter = filter;\n    }\n\n    return this;\n  },\n\n  // `removeFilter` is actually an alias for removing filters.\n  removeFilter(options) {\n    return this.setFilter(null, options);\n  },\n\n  // Calculate and apply difference by cid between `models` and `previousModels`.\n  _applyModelDeltas(models, previousModels) {\n    const currentIds = {};\n    _.each(models, (model, index) => {\n      const addedChildNotExists = !this.children.findByModel(model);\n      if (addedChildNotExists) {\n        this._onCollectionAdd(model, this.collection, {at: index});\n      }\n      currentIds[model.cid] = true;\n    });\n\n    const removeModels = _.filter(previousModels, (prevModel) => {\n      return !currentIds[prevModel.cid] && this.children.findByModel(prevModel);\n    });\n\n    this._removeChildModels(removeModels);\n  },\n\n  // Reorder DOM after sorting. When your element's rendering do not use their index,\n  // you can pass reorderOnSort: true to only reorder the DOM after a sort instead of\n  // rendering all the collectionView.\n  reorder() {\n    const children = this.children;\n    const models = this._filteredSortedModels();\n\n    if (!models.length && this._showingEmptyView) { return this; }\n\n    const anyModelsAdded = _.some(models, function(model) {\n      return !children.findByModel(model);\n    });\n\n    // If there are any new models added due to filtering we need to add child views,\n    // so render as normal.\n    if (anyModelsAdded) {\n      this.render();\n    } else {\n\n      const filteredOutModels = [];\n\n      // Get the DOM nodes in the same order as the models and\n      // find the model that were children before but aren't in this new order.\n      const elsToReorder = _.reduce(this.children._views, function(viewEls, view) {\n        const index = _.indexOf(models, view.model);\n\n        if (index === -1) {\n          filteredOutModels.push(view.model);\n          return viewEls;\n        }\n\n        view._index = index;\n\n        viewEls[index] = view.el;\n\n        return viewEls;\n      }, new Array(models.length));\n\n      this.triggerMethod('before:reorder', this);\n\n      const elBuffer = this.Dom.createBuffer();\n\n      _.each(elsToReorder, (el) => {\n        this.Dom.appendContents(elBuffer, el);\n      });\n\n      // Since append moves elements that are already in the DOM, appending the elements\n      // will effectively reorder them.\n      this._appendReorderedChildren(elBuffer);\n\n      // remove any views that have been filtered out\n      this._removeChildModels(filteredOutModels);\n\n      this.triggerMethod('reorder', this);\n    }\n    return this;\n  },\n\n  // Render view after sorting. Override this method to change how the view renders\n  // after a `sort` on the collection.\n  resortView() {\n    if (this.reorderOnSort) {\n      this.reorder();\n    } else {\n      this._renderChildren();\n    }\n    return this;\n  },\n\n  // Internal method. This checks for any changes in the order of the collection.\n  // If the index of any view doesn't match, it will render.\n  _sortViews() {\n    const models = this._filteredSortedModels();\n\n    // check for any changes in sort order of views\n    const orderChanged = _.find(models, (item, index) => {\n      const view = this.children.findByModel(item);\n      return !view || view._index !== index;\n    });\n\n    if (orderChanged) {\n      this.resortView();\n    }\n  },\n\n  // Internal reference to what index a `emptyView` is.\n  _emptyViewIndex: -1,\n\n  // Internal method. Separated so that CompositeView can append to the childViewContainer\n  // if necessary\n  _appendReorderedChildren(children) {\n    this.Dom.appendContents(this.el, children, {_$el: this.$el});\n  },\n\n  // Internal method. Separated so that CompositeView can have more control over events\n  // being triggered, around the rendering process\n  _renderChildren() {\n    if (this._isRendered) {\n      this._destroyEmptyView();\n      this._destroyChildren();\n    }\n\n    const models = this._filteredSortedModels();\n    if (this.isEmpty({processedModels: models})) {\n      this._showEmptyView();\n    } else {\n      this.triggerMethod('before:render:children', this);\n      this._startBuffering();\n      this._showCollection(models);\n      this._endBuffering();\n      this.triggerMethod('render:children', this);\n    }\n  },\n\n  _createView(model, index) {\n    const ChildView = this._getChildView(model);\n    const childViewOptions = this._getChildViewOptions(model, index);\n    const view = this.buildChildView(model, ChildView, childViewOptions);\n    return view;\n  },\n\n  _setupChildView(view, index) {\n    monitorViewEvents(view);\n\n    // set up the child view event forwarding\n    this._proxyChildViewEvents(view);\n\n    if (this.sort) {\n      view._index = index;\n    }\n  },\n\n  // Internal method to loop through collection and show each child view.\n  _showCollection(models) {\n    _.each(models, _.bind(this._addChild, this));\n    this.children._updateLength();\n  },\n\n  // Allow the collection to be sorted by a custom view comparator\n  _filteredSortedModels(addedAt) {\n    if (!this.collection || !this.collection.length) { return []; }\n\n    const viewComparator = this.getViewComparator();\n    let models = this.collection.models;\n    addedAt = Math.min(Math.max(addedAt, 0), models.length - 1);\n\n    if (viewComparator) {\n      let addedModel;\n      // Preserve `at` location, even for a sorted view\n      if (addedAt) {\n        addedModel = models[addedAt];\n        models = models.slice(0, addedAt).concat(models.slice(addedAt + 1));\n      }\n      models = this._sortModelsBy(models, viewComparator);\n      if (addedModel) {\n        models.splice(addedAt, 0, addedModel);\n      }\n    }\n\n    // Filter after sorting in case the filter uses the index\n    models = this._filterModels(models);\n\n    return models;\n  },\n\n  getViewComparator() {\n    return this.viewComparator;\n  },\n\n  // Filter an array of models, if a filter exists\n  _filterModels(models) {\n    if (this.filter) {\n      models = _.filter(models, (model, index) => {\n        return this._shouldAddChild(model, index);\n      });\n    }\n    return models;\n  },\n\n  _sortModelsBy(models, comparator) {\n    if (typeof comparator === 'string') {\n      return _.sortBy(models, (model) => {\n        return model.get(comparator);\n      });\n    } else if (comparator.length === 1) {\n      return _.sortBy(models, _.bind(comparator, this));\n    } else {\n      return _.clone(models).sort(_.bind(comparator, this));\n    }\n  },\n\n  // Internal method to show an empty view in place of a collection of child views,\n  // when the collection is empty\n  _showEmptyView() {\n    const EmptyView = this._getEmptyView();\n\n    if (EmptyView && !this._showingEmptyView) {\n      this._showingEmptyView = true;\n\n      const model = new Backbone.Model();\n      let emptyViewOptions =\n        this.emptyViewOptions || this.childViewOptions;\n      if (_.isFunction(emptyViewOptions)) {\n        emptyViewOptions = emptyViewOptions.call(this, model, this._emptyViewIndex);\n      }\n\n      const view = this.buildChildView(model, EmptyView, emptyViewOptions);\n\n      this.triggerMethod('before:render:empty', this, view);\n      this.addChildView(view, 0);\n      this.triggerMethod('render:empty', this, view);\n    }\n  },\n\n  // Internal method to destroy an existing emptyView instance if one exists. Called when\n  // a collection view has been rendered empty, and then a child is added to the collection.\n  _destroyEmptyView() {\n    if (this._showingEmptyView) {\n      this.triggerMethod('before:remove:empty', this);\n\n      this._destroyChildren();\n      delete this._showingEmptyView;\n\n      this.triggerMethod('remove:empty', this);\n    }\n  },\n\n  // Retrieve the empty view class\n  _getEmptyView() {\n    const emptyView = this.emptyView;\n\n    if (!emptyView) { return; }\n\n    return this._getView(emptyView);\n  },\n\n  // Retrieve the `childView` class\n  // The `childView` property can be either a view class or a function that\n  // returns a view class. If it is a function, it will receive the model that\n  // will be passed to the view instance (created from the returned view class)\n  _getChildView(child) {\n    let childView = this.childView;\n\n    if (!childView) {\n      throw new MarionetteError({\n        name: 'NoChildViewError',\n        message: 'A \"childView\" must be specified'\n      });\n    }\n\n    childView = this._getView(childView, child);\n\n    if (!childView) {\n      throw new MarionetteError({\n        name: 'InvalidChildViewError',\n        message: '\"childView\" must be a view class or a function that returns a view class'\n      });\n    }\n\n    return childView;\n  },\n\n  // First check if the `view` is a view class (the common case)\n  // Then check if it's a function (which we assume that returns a view class)\n  _getView(view, child) {\n    if (view.prototype instanceof Backbone.View || view === Backbone.View) {\n      return view;\n    } else if (_.isFunction(view)) {\n      return view.call(this, child);\n    }\n  },\n\n  // Internal method for building and adding a child view\n  _addChild(child, index) {\n    const view = this._createView(child, index);\n    this.addChildView(view, index);\n\n    return view;\n  },\n\n  _getChildViewOptions(child, index) {\n    if (_.isFunction(this.childViewOptions)) {\n      return this.childViewOptions(child, index);\n    }\n\n    return this.childViewOptions;\n  },\n\n  // Render the child's view and add it to the HTML for the collection view at a given index.\n  // This will also update the indices of later views in the collection in order to keep the\n  // children in sync with the collection.\n  addChildView(view, index) {\n    this.triggerMethod('before:add:child', this, view);\n    this._setupChildView(view, index);\n\n    // Store the child view itself so we can properly remove and/or destroy it later\n    if (this._isBuffering) {\n      // Add to children, but don't update children's length.\n      this.children._add(view);\n    } else {\n      // increment indices of views after this one\n      this._updateIndices(view, true);\n      this.children.add(view);\n    }\n\n    renderView(view);\n\n    this._attachView(view, index);\n\n    this.triggerMethod('add:child', this, view);\n\n    return view;\n  },\n\n  // Internal method. This decrements or increments the indices of views after the added/removed\n  // view to keep in sync with the collection.\n  _updateIndices(views, increment) {\n    if (!this.sort) {\n      return;\n    }\n\n    if (!increment) {\n      _.each(_.sortBy(this.children._views, '_index'), (view, index) => {\n        view._index = index;\n      });\n\n      return;\n    }\n\n    const view = _.isArray(views) ? _.max(views, '_index') : views;\n\n    if (_.isObject(view)) {\n      // update the indexes of views after this one\n      _.each(this.children._views, (laterView) => {\n        if (laterView._index >= view._index) {\n          laterView._index += 1;\n        }\n      });\n    }\n  },\n\n  _attachView(view, index) {\n    // Only trigger attach if already attached and not buffering,\n    // otherwise _endBuffering() or Region#show() handles this.\n    const shouldTriggerAttach = !view._isAttached && !this._isBuffering && this._isAttached && this.monitorViewEvents !== false;\n\n    if (shouldTriggerAttach) {\n      triggerMethodOn(view, 'before:attach', view);\n    }\n\n    this.attachHtml(this, view, index);\n\n    if (shouldTriggerAttach) {\n      view._isAttached = true;\n      triggerMethodOn(view, 'attach', view);\n    }\n  },\n\n  // Build a `childView` for a model in the collection.\n  buildChildView(child, ChildViewClass, childViewOptions) {\n    const options = _.extend({model: child}, childViewOptions);\n    return new ChildViewClass(options);\n  },\n\n  // Remove the child view and destroy it. This function also updates the indices of later views\n  // in the collection in order to keep the children in sync with the collection.\n  removeChildView(view) {\n    if (!view || view._isDestroyed) {\n      return view;\n    }\n\n    this._removeChildView(view);\n    this.children._updateLength();\n    // decrement the index of views after this one\n    this._updateIndices(view, false);\n    return view;\n  },\n\n  // check if the collection is empty or optionally whether an array of pre-processed models is empty\n  isEmpty(options) {\n    let models;\n    if (_.result(options, 'processedModels')) {\n      models = options.processedModels;\n    } else {\n      models = this.collection ? this.collection.models : [];\n      models = this._filterModels(models);\n    }\n    return models.length === 0;\n  },\n\n  // You might need to override this if you've overridden attachHtml\n  attachBuffer(collectionView, buffer) {\n    this.Dom.appendContents(collectionView.el, buffer, {_$el: collectionView.$el});\n  },\n\n  // Create a fragment buffer from the currently buffered children\n  _createBuffer() {\n    const elBuffer = this.Dom.createBuffer();\n    _.each(this._bufferedChildren, (b) => {\n      this.Dom.appendContents(elBuffer, b.el, {_$contents: b.$el});\n    });\n    return elBuffer;\n  },\n\n  // Append the HTML to the collection's `el`. Override this method to do something other\n  // than `.append`.\n  attachHtml(collectionView, childView, index) {\n    if (collectionView._isBuffering) {\n      // buffering happens on reset events and initial renders\n      // in order to reduce the number of inserts into the\n      // document, which are expensive.\n      collectionView._bufferedChildren.splice(index, 0, childView);\n    } else {\n      // If we've already rendered the main collection, append\n      // the new child into the correct order if we need to. Otherwise\n      // append to the end.\n      if (!collectionView._insertBefore(childView, index)) {\n        collectionView._insertAfter(childView);\n      }\n    }\n  },\n\n  // Internal method. Check whether we need to insert the view into the correct position.\n  _insertBefore(childView, index) {\n    let currentView;\n    const findPosition = this.sort && (index < this.children.length - 1);\n    if (findPosition) {\n      // Find the view after this one\n      currentView = _.find(this.children._views, (view) => {\n        return view._index === index + 1;\n      });\n    }\n\n    if (currentView) {\n      this.beforeEl(currentView.el, childView.el);\n      return true;\n    }\n\n    return false;\n  },\n\n  // Override to handle DOM inserting differently\n  beforeEl(el, siblings) {\n    this.$(el).before(siblings);\n  },\n\n  // Internal method. Append a view to the end of the $el\n  _insertAfter(childView) {\n    this.Dom.appendContents(this.el, childView.el, {_$el: this.$el, _$contents: childView.$el});\n  },\n\n  // Internal method to set up the `children` object for storing all of the child views\n  _initChildViewStorage() {\n    this.children = new ChildViewContainer();\n  },\n\n  // called by ViewMixin destroy\n  _removeChildren() {\n    this._destroyChildren();\n  },\n\n  // Destroy the child views that this collection view is holding on to, if any\n  _destroyChildren(options) {\n    if (!this.children.length) {\n      return;\n    }\n\n    this.triggerMethod('before:destroy:children', this);\n    _.each(this.children._views, _.bind(this._removeChildView, this));\n    this.children._updateLength();\n    this.triggerMethod('destroy:children', this);\n  },\n\n  // Return true if the given child should be shown. Return false otherwise.\n  // The filter will be passed (child, index, collection), where\n  //  'child' is the given model\n  //  'index' is the index of that model in the collection\n  //  'collection' is the collection referenced by this CollectionView\n  _shouldAddChild(child, index) {\n    const filter = this.filter;\n    return !_.isFunction(filter) || filter.call(this, child, index, this.collection);\n  }\n}, {\n  setDomApi\n});\n\n_.extend(CollectionView.prototype, ViewMixin);\n\nexport default CollectionView;\n","// Composite View\n// --------------\n\nimport _ from 'underscore';\nimport Marionette from 'backbone.marionette';\nimport CollectionView from './collection-view';\n\nconst MarionetteError = Marionette.Error;\nconst View = Marionette.View;\n\nconst ClassOptions = [\n  'childViewContainer',\n  'template',\n  'templateContext'\n];\n\n// Used for rendering a branch-leaf, hierarchical structure.\n// Extends directly from CollectionView\n// @deprecated\nconst CompositeView = CollectionView.extend({\n\n  // Setting up the inheritance chain which allows changes to\n  // Marionette.CollectionView.prototype.constructor which allows overriding\n  // option to pass '{sort: false}' to prevent the CompositeView from\n  // maintaining the sorted order of the collection.\n  // This will fallback onto appending childView's to the end.\n  constructor(options) {\n    this.mergeOptions(options, ClassOptions);\n\n    CollectionView.prototype.constructor.apply(this, arguments);\n  },\n\n  // Configured the initial events that the composite view\n  // binds to. Override this method to prevent the initial\n  // events, or to add your own initial events.\n  _initialEvents() {\n\n    // Bind only after composite view is rendered to avoid adding child views\n    // to nonexistent childViewContainer\n\n    if (this.collection) {\n      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n      this.listenTo(this.collection, 'update', this._onCollectionUpdate);\n      this.listenTo(this.collection, 'reset', this.renderChildren);\n\n      if (this.sort) {\n        this.listenTo(this.collection, 'sort', this._sortViews);\n      }\n    }\n  },\n\n  // Retrieve the `childView` to be used when rendering each of\n  // the items in the collection. The default is to return\n  // `this.childView` or Marionette.CompositeView if no `childView`\n  // has been defined. As happens in CollectionView, `childView` can\n  // be a function (which should return a view class).\n  _getChildView(child) {\n    let childView = this.childView;\n\n    // for CompositeView, if `childView` is not specified, we'll get the same\n    // composite view class rendered for each child in the collection\n    // then check if the `childView` is a view class (the common case)\n    // finally check if it's a function (which we assume that returns a view class)\n    if (!childView) {\n      return this.constructor;\n    }\n\n    childView = this._getView(childView, child);\n\n    if (!childView) {\n      throw new MarionetteError({\n        name: 'InvalidChildViewError',\n        message: '\"childView\" must be a view class or a function that returns a view class'\n      });\n    }\n\n    return childView;\n  },\n\n  // Return the serialized model\n  serializeData() {\n    return this.serializeModel();\n  },\n\n  // Renders the model and the collection.\n  render() {\n    if (this._isDestroyed) { return this; }\n    this._isRendering = true;\n    this.resetChildViewContainer();\n\n    this.triggerMethod('before:render', this);\n\n    this._renderTemplate();\n    this.bindUIElements();\n    this.renderChildren();\n\n    this._isRendering = false;\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n    return this;\n  },\n\n  renderChildren() {\n    if (this._isRendered || this._isRendering) {\n      CollectionView.prototype._renderChildren.call(this);\n    }\n  },\n\n  // You might need to override this if you've overridden attachHtml\n  attachBuffer(compositeView, buffer) {\n    const $container = this.getChildViewContainer(compositeView);\n    this.Dom.appendContents($container[0], buffer, {_$el: $container});\n  },\n\n  // Internal method. Append a view to the end of the $el.\n  // Overidden from CollectionView to ensure view is appended to\n  // childViewContainer\n  _insertAfter(childView) {\n    const $container = this.getChildViewContainer(this, childView);\n    this.Dom.appendContents($container[0], childView.el, {_$el: $container, _$contents: childView.$el});\n  },\n\n  // Internal method. Append reordered childView'.\n  // Overidden from CollectionView to ensure reordered views\n  // are appended to childViewContainer\n  _appendReorderedChildren(children) {\n    const $container = this.getChildViewContainer(this);\n    this.Dom.appendContents($container[0], children, {_$el: $container});\n  },\n\n  // Internal method to ensure an `$childViewContainer` exists, for the\n  // `attachHtml` method to use.\n  getChildViewContainer(containerView, childView) {\n    if (!!containerView.$childViewContainer) {\n      return containerView.$childViewContainer;\n    }\n\n    let container;\n    const childViewContainer = containerView.childViewContainer;\n    if (childViewContainer) {\n\n      const selector = _.result(containerView, 'childViewContainer');\n\n      if (selector.charAt(0) === '@' && containerView.ui) {\n        container = containerView.ui[selector.substr(4)];\n      } else {\n        container = this.$(selector);\n      }\n\n      if (container.length <= 0) {\n        throw new MarionetteError({\n          name: 'ChildViewContainerMissingError',\n          message: `The specified \"childViewContainer\" was not found: ${containerView.childViewContainer}`\n        });\n      }\n\n    } else {\n      container = containerView.$el;\n    }\n\n    containerView.$childViewContainer = container;\n    return container;\n  },\n\n  // Internal method to reset the `$childViewContainer` on render\n  resetChildViewContainer() {\n    if (this.$childViewContainer) {\n      this.$childViewContainer = undefined;\n    }\n  }\n});\n\n// To prevent duplication but allow the best View organization\n// Certain View methods are mixed directly into the deprecated CompositeView\nconst MixinFromView = _.pick(View.prototype, 'serializeModel', 'getTemplate', '_renderTemplate', '_renderHtml', 'mixinTemplateContext', 'attachElContent');\n_.extend(CompositeView.prototype, MixinFromView);\n\nexport default CompositeView;\n","import Marionette from 'backbone.marionette';\nimport OldCollectionView from './collection-view';\nimport OldCompositeView from './composite-view';\n\nMarionette.OldCollectionView = OldCollectionView;\nMarionette.OldCompositeView = OldCompositeView;\n\nexport { OldCollectionView, OldCompositeView }\n"],"names":["splitter","getEventName","match","prefix","eventName","toUpperCase","getOnMethodName","_","memoize","event","replace","triggerMethod","args","methodName","method","Marionette","getOption","result","isFunction","apply","trigger","arguments","triggerMethodOn","context","renderView","view","_isRendered","supportsRenderLifecycle","render","destroyView","destroy","supportsDestroyLifecycle","shouldTriggerDetach","_isAttached","_shouldDisableEvents","remove","_isDestroyed","triggerMethodChildren","shouldTrigger","_getImmediateChildren","each","child","shouldTriggerAttach","shouldAttach","shouldDetach","triggerDOMRefresh","triggerDOMRemove","handleBeforeAttach","handleAttach","handleBeforeDetach","handleDetach","handleBeforeRender","handleRender","monitorViewEvents","_areViewEventsMonitored","on","methods","emulateCollection","object","listProperty","list","Array","prototype","slice","call","concat","Container","views","_views","_indexByModel","_indexByCustom","_updateLength","bind","add","extend","values","customIndex","_add","viewCid","cid","model","findByModelCid","modelCid","findByCid","index","_remove","some","key","length","size","setDomApi","View","ViewMixin","pick","isNodeAttached","MarionetteError","Error","ClassOptions","CollectionView","Backbone","options","_setOptions","mergeOptions","_initBehaviors","once","_initialEvents","_initChildViewStorage","_bufferedChildren","constructor","delegateEntityEvents","_triggerEventOnBehaviors","_isBuffering","triggerOnChildren","attachBuffer","_createBuffer","children","collection","listenTo","_onCollectionAdd","_onCollectionUpdate","sort","_sortViews","opts","at","undefined","indexOf","filter","_filteredSortedModels","_shouldAddChild","_destroyEmptyView","_addChild","changes","_removeChildModels","removed","models","removedViews","_getRemovedViews","_updateIndices","isEmpty","_showEmptyView","reduce","removingViews","findByModel","_removeChildView","push","stopListening","hasEl","el","setElement","_renderChildren","preventRender","canBeRendered","filterChanged","shouldRender","previousModels","_applyModelDeltas","setFilter","currentIds","addedChildNotExists","removeModels","prevModel","_showingEmptyView","anyModelsAdded","filteredOutModels","elsToReorder","viewEls","_index","elBuffer","Dom","createBuffer","appendContents","_appendReorderedChildren","reorderOnSort","reorder","orderChanged","find","item","resortView","_$el","$el","_destroyChildren","processedModels","_startBuffering","_showCollection","_endBuffering","ChildView","_getChildView","childViewOptions","_getChildViewOptions","buildChildView","_proxyChildViewEvents","addedAt","viewComparator","getViewComparator","Math","min","max","addedModel","_sortModelsBy","splice","_filterModels","comparator","sortBy","get","clone","EmptyView","_getEmptyView","Model","emptyViewOptions","_emptyViewIndex","addChildView","emptyView","_getView","childView","_createView","_setupChildView","_attachView","increment","isArray","isObject","laterView","attachHtml","ChildViewClass","collectionView","buffer","b","_$contents","_insertBefore","_insertAfter","currentView","findPosition","beforeEl","siblings","$","before","ChildViewContainer","CompositeView","renderChildren","serializeModel","_isRendering","resetChildViewContainer","_renderTemplate","bindUIElements","compositeView","$container","getChildViewContainer","containerView","$childViewContainer","container","childViewContainer","selector","charAt","ui","substr","MixinFromView","OldCollectionView","OldCompositeView"],"mappings":"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"}